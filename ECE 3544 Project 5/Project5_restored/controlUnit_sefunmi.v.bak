////////////////////////////////////////////////////////////////////////////////
// Modify this header with your name, date, etc.

// Filename: project5Top.v
// Author:   Jason Thweatt
// Date:     28 November 2019
// Revision: 2
// 
// Description: 
// This is the top level module for ECE 3544 Project 5.
// Do not modify the module declarations or ports in this file.
// Make a pin assignment before you program your board with this design!

module functionUnit_sefunmi(clock, reset, events_in, events_out, Opcode, A, B, C, Result);
	input        clock;        // The system clock
   input        reset;       // Asynchronous active-low init
   input  [5:0] events_in;    // The input events
                              // - Bit 2: mode
                              // - Bit 1: action
                              // - Bit 0: stop/go
   output [2:0] events_out;   // The output events
	reg    [2:0] events_out;
   reg    [3:0] state;     // FSM state
	
   parameter  opcode = 4'b0001, op_a = 4'b0001, op_b = 4'b0001;

   // State Machine
   // Make additions to the init condition and the case structure to describe the next state behavior.
   always@(posedge clock or negedge reset) begin
      if(reset == 1'b0) state <= sleep;
      else begin
         case(state)
            opcode:	if(events_in[0] == 1'b1) 																																										state <= op_a;
            op_a:  	if(events_in[0] == 1'b1 && (events_in[4:1] == 4'b0011|| events_in[4:1] == 4'b0111 || events_in[4:1] == 4'b1101 || events_in[4:1] == 4'b1111)) 			state <= opcode;
							else if(events_in[0] == 1'b1)																																									state <= op_b;
            op_b:  	if(events_in[0] == 1'b1)																																										state <= opcode;
            default:  																																																		state <= 4'bxxxx;
         endcase
      end
   end
										
   // Output machine
   // Make additions to the case structure to describe the output behavior for each state.
	always@(state) begin
      case(state)
         opcode:      	events_out = 3'b100;
         op_a:      		events_out = 3'b010;
         op_b:      		events_out = 3'b001;
         default:  		events_out = 3'bxxx;
      endcase
  end
							  
endmodule
